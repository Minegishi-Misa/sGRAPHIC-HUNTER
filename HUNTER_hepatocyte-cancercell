##### library import #####
require(readr)
library(plyr)
library(dplyr)
library(conflicted)
conflict_prefer("combine", "dplyr")
conflict_prefer("arrange", "dplyr")
library(tidyr)
library(ggplot2)
library(tidyverse)
library(R.utils)
library(RCurl)
library(Matrix)
library(openxlsx)
library(Seurat)
library(SingleCellSignalR)
library(seqinr)
library(stringr)
library(VennDiagram)
library(stringdist)
library(biomaRt)
library("enrichplot")
library("pathview")
library("org.Mm.eg.db")
library(clusterProfiler)


##### data import ######
hunter <- Read10X(data.dir="./20220411_scHUNTER/")
hunter.seurat <- CreateSeuratObject(hunter)
cellids <- colnames(hunter.seurat)
hunter.seurat[["plate"]] <- substr(cellids,1,3)
hunter.seurat[["cell"]] <- substr(cellids,4,6)
hunter.seurat[["gate"]] <- substr(cellids,7,8)
hunter.seurat[["pool"]] <- substr(cellids,10,10)
hunter.seurat[["barcode"]] <- substr(cellids,12,21)
hunter.seurat[["percent.mt"]] <- PercentageFeatureSet(hunter.seurat, pattern = "^mt-")
FeatureScatter(hunter.seurat,feature1="nFeature_RNA",feature2 = "nCount_RNA",
               group.by="plate")
VlnPlot(hunter.seurat,features = "nCount_RNA",group.by = "plate")+scale_y_log10()

##### set cell condition #####
# allcell
allcell <- hunter.seurat
pbmc <- allcell
# source(file.path("/home/samba/public/shintaku/github/hunter2/util/hunter_biomart_ref.R")) ######ここを確認！！！下に全部入れたはずだけど。。。
gene_list <- data.frame(rownames(pbmc))
colnames(gene_list) <- "gene"
filter="mgi_symbol"
ms_mart <- useMart(biomart="ensembl", host="https://www.ensembl.org",dataset="mmusculus_gene_ensembl")
symbol="mgi_symbol"
ms_ref <- unique(func.biomart.ref(ms_mart,gene_list,filter,symbol))
missing_ref <- subset(gene_list,!(gene %in% ms_ref$gene_short_name))
adding_ref <- data.frame(cbind(missing_ref$gene,missing_ref$gene,missing_ref$gene,missing_ref$gene,missing_ref$gene, missing_ref$gene))
colnames(adding_ref) <- colnames(ms_ref)
rownames(adding_ref) <- adding_ref$ensembl_gene_id
ms_ref <- rbind(adding_ref,ms_ref)
rm(ms_mart,symbol,missing_ref,adding_ref,gene_list)

allcell <- pbmc

# E0771
E0771_1 <- subset(hunter.seurat, plate == "p02")
E0771_2 <- subset(hunter.seurat, plate == "P15")
E0771_3 <- subset(hunter.seurat, plate == "p20")

E0771_1[["condition"]] <- "E0771vitro"
E0771_2[["condition"]] <- "E0771vivo"
E0771_3[["condition"]] <- "E0771vitro"

E0771 <- merge(E0771_1, E0771_2)
E0771 <- merge(E0771, E0771_3)
rm(E0771_1, E0771_2, E0771_3)

# hepatocyte
hepa <- subset(hunter.seurat, plate == "p02", invert = T)
hepa <- subset(hepa, plate == "P15", invert = T)
hepa <- subset(hepa, plate == "p20", invert = T)

CGFPnega <- subset(hepa, plate == "P18", invert = T)
CGFPnega <- subset(CGFPnega, plate == "P19", invert = T)
CGFPnega <- subset(CGFPnega, plate == "P16", invert = T)
CGFPnega[["condition"]] <- "control GFP nega"
CGFPnega[["GFPlabel"]] <- "negative"
CGFPnega[["mouse"]] <- "control"

EGFPnega <- subset(hepa, plate == "P18")
EGFPnega[["condition"]] <- "E0771 transplanted GFP nega"
EGFPnega[["GFPlabel"]] <- "negative"
EGFPnega[["mouse"]] <- "transplanted"

EGFPposi <- merge(subset(hepa, plate == "P16"), subset(hepa, plate == "P19"))
EGFPposi[["condition"]] <- "E0771 transplanted GFP posi"
EGFPposi[["GFPlabel"]] <- "positive"
EGFPposi[["mouse"]] <- "transplanted"

hepa <- merge(CGFPnega, EGFPnega)
hepa <- merge(hepa, EGFPposi)

#####allcell#####
all <- merge(E0771, hepa)
all <- subset(all, nCount_RNA > 3000)
all <- subset(all, percent.mt < 7)
pbmc <- all

pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 1e5)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 1000)

# show number of counts
p1<-VlnPlot(pbmc, features = c("nCount_RNA"),group.by = "plate")
p2<-VlnPlot(pbmc, features = c("nFeature_RNA"),group.by = "plate")
p1+p2

p1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA",group.by = "plate")+
  scale_x_log10()
p2 <-FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt",group.by = "plate" )
p1+p2

count_summary <- pbmc[[c("nCount_RNA","nFeature_RNA","gate","cell")]]
count_summary_mean <- count_summary %>%
  dplyr::group_by(gate,cell) %>%
  dplyr::summarise(nCount.mean=mean(nCount_RNA), nFeature.mean=mean(nFeature_RNA))

# number of UMI counts under various conditions
ggplot(count_summary_mean,aes(x=factor(gate),y=factor(cell),
                              color=nCount.mean,size=nCount.mean))+
  geom_point()+
  scale_size(range = c(10, 20))

tenx <- FetchData(pbmc,vars="nCount_RNA")
median(tenx$nCount_RNA)
mean(tenx$nCount_RNA)
tenx <- FetchData(pbmc,vars="nFeature_RNA")
median(tenx$nFeature_RNA)
mean(tenx$nFeature_RNA)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with labels
plot1 <- VariableFeaturePlot(pbmc)
plot1 <- LabelPoints(plot = plot1, points = top10)
plot1

# clustering 
conflict_prefer("mutate", "dplyr")
conflict_prefer("pheatmap", "pheatmap") 

cellids <- colnames(pbmc)
all.genes <- rownames(pbmc)

pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, npcs=20, features = VariableFeatures(object = pbmc))

print(pbmc[["pca"]], dims = 1:2, nfeatures = 50)

# gene expression scatter
pca_topcells <- TopCells(object = pbmc[['pca']], balanced = FALSE)
CellScatter(object = pbmc, cell1 = pca_topcells[1], cell2 = pca_topcells[2])

pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:20)
ElbowPlot(pbmc)

pbmc <- FindNeighbors(pbmc, dims = 1:15)
pbmc <- FindClusters(pbmc, resolution = 0.1)

# Retreiving the results of the preprocessing from the Seurat object
cluster = as.numeric(Idents(pbmc))
pbmc <- RunUMAP(pbmc, dims = 1:15)
pbmc <- RunTSNE(pbmc, dims = 1:15)
p1 <- DimPlot(pbmc, reduction = "umap",group.by = "condition")
p2 <- DimPlot(pbmc, reduction = "umap",group.by = "plate")
p3 <- DimPlot(pbmc)
p1+p2+p3

#find marker genes in each cluster
pbmc.markers <- FindAllMarkers(pbmc, only.pos = FALSE)
all.markers <- pbmc.markers

all <- pbmc

###### Hepatocyte ######
hepa <- subset(hepa, nCount_RNA > 3000)
hepa <- subset(hepa, percent.mt < 7)
pbmc <- hepa

# normalization
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 1e5)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 1000)

# show number of counts
p1<-VlnPlot(pbmc, features = c("nCount_RNA"),group.by = "plate")
p2<-VlnPlot(pbmc, features = c("nFeature_RNA"),group.by = "plate")
p1+p2

p1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA",group.by = "plate")+
  scale_x_log10()
p2 <-FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt",group.by = "plate" )
p1+p2

count_summary <- pbmc[[c("nCount_RNA","nFeature_RNA","gate","cell")]]
count_summary_mean <- count_summary %>%
  dplyr::group_by(gate,cell) %>%
  dplyr::summarise(nCount.mean=mean(nCount_RNA), nFeature.mean=mean(nFeature_RNA))

# number of UMI counts under various conditions
ggplot(count_summary_mean,aes(x=factor(gate),y=factor(cell),
                              color=nCount.mean,size=nCount.mean))+
  geom_point()+
  scale_size(range = c(10, 20))

tenx <- FetchData(pbmc,vars="nCount_RNA")
median(tenx$nCount_RNA)
mean(tenx$nCount_RNA)
tenx <- FetchData(pbmc,vars="nFeature_RNA")
median(tenx$nFeature_RNA)
mean(tenx$nFeature_RNA)

hepa <- pbmc

# three group comparison
cntl <- subset(hepa, condition == "control GFP nega")
nega <- subset(hepa, condition == "E0771 transplanted GFP nega")
posi <- subset(hepa, condition == "E0771 transplanted GFP posi")

Idents(cntl) <- "control"
Idents(nega) <- "negative"
Idents(posi) <- "positive"

hepato <- merge(cntl, nega)
hepato <- merge(hepato, posi)

cnp <- FindAllMarkers(hepato)
cnp <- cnp[cnp$p_val_adj < 0.1, ]
cnp.var <- unique(cnp$gene)

# GO analysis among three group
library("org.Mm.eg.db")
library(clusterProfiler)

ensmusg <- data.frame(unlist(as.list(org.Mm.egENSEMBL2EG)))
ms_ref$entrez_annotation <- ensmusg[ms_ref$ensembl_gene_id,] # entrez annotation

threegroup_entrez_posi <- function(threegroup.deg, ms_ref, cluster, p.thres, log2FC.thres){
  threegroup.marker.n <- threegroup.deg[threegroup.deg$cluster == cluster &
                                          threegroup.deg$p_val<p.thres &
                                          threegroup.deg$avg_log2FC > log2FC.thres,] # log2FC > 0
  perturbed_gene.n <- ms_ref[ms_ref$gene_short_name %in% threegroup.marker.n$gene,]
  perturbed_gene.n <- perturbed_gene.n[!is.na(perturbed_gene.n$entrez_annotation),]
  return(perturbed_gene.n)
}
threegroup_entrez_nega <- function(threegroup.deg, ms_ref, cluster, p.thres, log2FC.thres){
  threegroup.marker.n <- threegroup.deg[threegroup.deg$cluster == cluster &
                                          threegroup.deg$p_val<p.thres &
                                          (threegroup.deg$avg_log2FC)*(-1) > log2FC.thres,] # log2FC < 0
  perturbed_gene.n <- ms_ref[ms_ref$gene_short_name %in% threegroup.marker.n$gene,]
  perturbed_gene.n <- perturbed_gene.n[!is.na(perturbed_gene.n$entrez_annotation),]
  return(perturbed_gene.n)
}

cnp_p_posi.marker <- threegroup_entrez_posi(cnp, ms_ref, "positive", 0.01, 0.3) # log2FC > 0 in GFP posi
cnp_p_nega.marker <- threegroup_entrez_nega(cnp, ms_ref, "positive", 0.01, 0.3) # log2FC < 0 in GFP posi

ego_p_posi <- enrichGO(gene = cnp_p_posi.marker$entrez_annotation,
                          OrgDb = org.Mm.eg.db,
                          ont = "ALL",
                          pAdjustMethod = "BH",
                          pvalueCutoff = 0.05,
                          qvalueCutoff = 0.05, 
                          readable = T) # GO analysis of log2FC > 0 in GFP posi
ego_p_nega <- enrichGO(gene = cnp_p_nega.marker$entrez_annotation,
                       OrgDb = org.Mm.eg.db,
                       ont = "ALL",
                       pAdjustMethod = "BH",
                       pvalueCutoff = 0.05,
                       qvalueCutoff = 0.05, 
                       readable = T) # GO analysis of log2FC < 0 in GFP posi

barplot(ego_p_posi, drop = T, showCategory = 30, font.size = 8)
barplot(ego_p_nega, drop = T, showCategory = 30, font.size = 8)

write.xlsx(ego_p_posi, "ego_positive_log2FCposi.xlsx", sheetName = "Sheet1") # Fig 3B
write.xlsx(ego_p_nega, "ego_positive_log2FCnega.xlsx", sheetName = "Sheet1") # Fig 3B

# cell cycling score comparison among three groups
pbmc <- hepato

fucci_cellcycle_genes <- function(all_ref,url){
  cc_file <- getURL(url) 
  cell_cycle_genes <- read.csv(text = cc_file)
  
  cell_cycle_markers <- dplyr::left_join(cell_cycle_genes,ms_ref,by=c("geneID"="ensembl_gene_id"))
  cell_cycle_markers <- cell_cycle_markers[!is.na(cell_cycle_markers$gene_short_name),]
  
  # Acquire the S phase genes
  s_genes <- cell_cycle_markers %>% 
    dplyr::filter(phase == "S") %>% 
    pull("gene_short_name")
  s_genes <- s_genes[!is.na(s_genes)]
  # Acquire the G2M phase genes        
  g2m_genes <- cell_cycle_markers %>%
    dplyr::filter(phase == "G2/M") %>%
    pull("gene_short_name")
  g2m_genes <- g2m_genes[!is.na(g2m_genes)]
  
  return(list(cell_cycle_markers,s_genes,g2m_genes))
}

sub_ref <- ms_ref %>%
  dplyr::filter(gene_short_name %in% rownames(pbmc))
mm_url<-"https://raw.githubusercontent.com/hbc/tinyatlas/master/cell_cycle/Mus_musculus.csv"
genes <- fucci_cellcycle_genes(sub_ref,mm_url)
cell_cycle_markers<-genes[[1]]
s_genes <- genes[[2]]
g2m_genes <- genes[[3]]
pbmc <- CellCycleScoring(pbmc,g2m.features = g2m_genes,s.features = s_genes,set.ident = TRUE)
#pbmc <- ScaleData(pbmc, vars.to.regress = c("S.Score", "G2M.Score"), features = c(s_genes, g2m_genes))
features=c("S.Score","G2M.Score")

VlnPlot(pbmc, features = "S.Score", group.by = "condition", cols = c("#E88682", "#93458A", "#22AC7C")) + 
  VlnPlot(pbmc, features = "G2M.Score", group.by = "condition", cols = c("#E88682", "#93458A", "#22AC7C")) 
  
# Lgals3 expression for hepatocytes
VlnPlot(hepato, features = "Lgals3", group.by = "condition", cols = c("#E88682", "#93458A", "#22AC7C"))

# hepatocyte clustering
pbmc <- hepato

cellids <- colnames(pbmc)
all.genes <- rownames(pbmc)

pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, npcs=20, features = cnp.var)
print(pbmc[["pca"]], dims = 1:2, nfeatures = 50)

p1 <- DimPlot(pbmc, reduction = "pca",group.by = "condition")
p2 <- DimPlot(pbmc, reduction = "pca",group.by = "plate")
p3 <- DimPlot(pbmc, reduction = "pca",group.by = "gate")
p4 <- DimPlot(pbmc, reduction = "pca",group.by = "pool")
p1+p2+p3+p4

# gene expression scatter
pca_topcells <- TopCells(object = pbmc[['pca']], balanced = FALSE)
CellScatter(object = pbmc, cell1 = pca_topcells[1], cell2 = pca_topcells[2])

pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:20)
ElbowPlot(pbmc)

pbmc <- FindNeighbors(pbmc, dims = 1:4) 
pbmc <- FindClusters(pbmc, resolution = 0.3) 

cluster = as.numeric(Idents(pbmc))
pbmc <- RunUMAP(pbmc, dims = 1:4)
pbmc <- RunTSNE(pbmc, dims = 1:4)
p1 <- DimPlot(pbmc, reduction = "tsne", group.by = "condition")
p2 <- DimPlot(pbmc, reduction = "tsne", group.by = "plate")
p3 <- DimPlot(pbmc, reduction = "tsne")
p1+p2+p3

hepato <- pbmc
hepato <- RenameIdents(hepato, '1' = '1', '0' = '2', '2' = '3')
DimPlot(hepato, reduction = "tsne", group.by = "condition", 
        cols = c("#F88284", "#93458A", "#22AC7C"))

pbmc <- hepato
cluster <-data.frame(as.numeric(Idents(pbmc)))
colnames(cluster) <- "cluster"
rownames(cluster) <- colnames(pbmc)
cluster$condition <- pbmc[['condition']]

cluster_density <- cluster %>%
  dplyr::group_by(cluster) %>%
  dplyr::count(condition, name = 'count') %>%
  dplyr::group_by(condition) %>%
  mutate(freq=count/sum(count))

library(ggplot2)
library(plyr)
library(scales)

ggplot(cluster, aes(x = cluster, fill = condition$condition), stat = "count") + 
  geom_bar(position = "fill") + coord_flip() + scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("#F88284", "#93458A", "#22AC7C")) + theme_bw() + theme(text = element_text(angle=(90))) 

# cluster maker genes 
hepato.markers <- FindAllMarkers(hepato, only.pos = T)
hepato.markers <- hepato.markers[hepato.markers$p_val_adj < 0.1, ]

# Heatmap
hepa_GFP <- subset(hepato, condition == "E0771 transplanted GFP posi")
pbmc <- hepa_GFP

library(destiny)
library(ggplot2)
library(conflicted)
suppressPackageStartupMessages(library(scran))
library(purrr)
library(wordspace)
library(pheatmap)

pbmc.data <-pbmc[["RNA"]]@data
variable_genes <- hepato.markers[hepato.markers$cluster == 2 | hepato.markers$cluster == 3, ]
variable_genes <- variable_genes[variable_genes$p_val_adj<0.05 &
                                   variable_genes$avg_log2FC>0.3, ]
variable_genes %>% group_by(cluster) %>% top_n(n = 20, wt = avg_log2FC) -> top20
variable_genes %>% group_by(cluster) %>% top_n(n = 15, wt = avg_log2FC) -> top15
c2_c3 <- data.frame(t(pbmc.data[c(variable_genes$gene),]))
cellids<- rownames(c2_c3)

dm <- DiffusionMap(c2_c3)
pbmc[["pseudospace"]]<-dm$DC1
pbmc[["cluster"]] <- Idents(pbmc)

annotation_colinfo = data.frame(
  cluster = pbmc[["cluster"]]
)
ann_colors = list(cluster = c("2" = "#53B74B", "3" = "#6E9BF8"))　

pheatmap(pbmc[["RNA"]]@data[top20$gene,order(pbmc[["pseudospace"]],decreasing=F)],
         annotation_col = pbmc[["cluster"]],
         annotation_colors = ann_colors,
         cluster_cols = F,
         labels_col = NULL) # Fig 4B

# SCENIC
library(SCENIC)
library(loomR)
library(conflicted)
conflict_prefer("first", "S4Vectors")
conflict_prefer("finalize", "SCopeLoomR")
exprMat <- as.matrix(hepato[["RNA"]]@counts) 
cellInfo <- data.frame(seuratCluster=Idents(hepato))
loom <- build_loom("hunter_hepa.loom", dgem=exprMat)
loom <- add_cell_annotation(loom, cellInfo)
close_loom(loom)
org <- "mgi"
dbDir <- "./cisTarget_mm10/" # RcisTarget databases location
myDatasetTitle <- "SCENIC hunter hepatocytes" 
dbs <- c("mm10__refseq-r80__500bp_up_and_100bp_down_tss.mc9nr.feather",
         "mm10__refseq-r80__10kb_up_and_down_tss.mc9nr.feather")
names(dbs)<-c("500bp","10kb")
scenicOptions <- initializeScenic(org=org, dbDir=dbDir, dbs=dbs, datasetTitle=myDatasetTitle, nCores=16)
saveRDS(scenicOptions, file="scenicOptions.Rds") 
genesKept <- geneFiltering(exprMat, scenicOptions)
exprMat_filtered <- exprMat[genesKept, ]
runCorrelation(exprMat_filtered, scenicOptions)
exprMat_filtered_log <- log2(exprMat_filtered+1) 
runGenie3(exprMat_filtered_log, scenicOptions)
exprMat_log <- log2(exprMat+1)
scenicOptions@settings$dbs <- scenicOptions@settings$dbs["10kb"] # Toy run settings
scenicOptions <- runSCENIC_1_coexNetwork2modules(scenicOptions)
scenicOptions <- runSCENIC_2_createRegulons(scenicOptions) # Toy run settings coexMethod=c("top5perTarget")
scenicOptions <- runSCENIC_3_scoreCells(scenicOptions, exprMat_log)
saveRDS(scenicOptions, file="scenicOptions.Rds")
scenicOptions <- runSCENIC_4_aucell_binarize(scenicOptions) 
tsneAUC(scenicOptions, aucType="AUC") # choose settings
export2loom(scenicOptions, exprMat)
saveRDS(scenicOptions, file="scenicOptions.Rds") 
motifEnrichment_selfMotifs_wGenes <- loadInt(scenicOptions, "motifEnrichment_selfMotifs_wGenes")
tableSubset <- motifEnrichment_selfMotifs_wGenes[highlightedTFs=="Myc"]
viewMotifs(tableSubset, options=list(pageLength=100)) 
regulonTargetsInfo <- loadInt(scenicOptions, "regulonTargetsInfo")
tableSubset <- regulonTargetsInfo 
viewMotifs(tableSubset, options=list(pageLength=100))
regulonAUC <- loadInt(scenicOptions, "aucell_regulonAUC")
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=cellInfo[colnames(regulonAUC), "seuratCluster"], )
rssPlot <- plotRSS(rss) 
plotly::ggplotly(rssPlot$plot)
regulonAUC <- regulonAUC[onlyNonDuplicatedExtended(rownames(regulonAUC)),]
regulonActivity_byCellClsuter <- sapply(split(rownames(cellInfo), cellInfo$seuratCluster),
                                        function(cells) rowMeans(getAUC(regulonAUC[, cells])))
regulonActivity_byCellCluster_Scaled <- t(scale(t(regulonActivity_byCellClsuter), center = T, scale = T))
ComplexHeatmap::Heatmap(regulonActivity_byCellCluster_Scaled, name="Regulon activity", row_names_gp = grid::gpar(fontsize = 6))
topRegulators <- reshape2::melt(regulonActivity_byCellCluster_Scaled)
regulonActivity_byCellCluster_Scaled2 <- regulonActivity_byCellCluster_Scaled
colnames(topRegulators) <- c("Regulon", "seuratCluster", "RelativeActivity")
topRegulators <- topRegulators[which(topRegulators$RelativeActivity>1),]
viewTable(topRegulators)

MAHgenes <- hepato.markers[hepato.markers$cluster == 3, ]
MAHgenes <- MAHgenes[MAHgenes$p_val_adj<0.01 &
                                   MAHgenes$avg_log2FC>1, ]
MAHg <- rownames(MAHgenes)
TF <- regulonTargetsInfo[TF %in% c("Myc", "Klf2", "Tfdp1", "Sap30", "E2f4") & highConfAnnot==T 
                         & gene %in% MAHg & CoexWeight >= 0.007] #
library(igraph)
gg<-graph_from_edgelist(t(rbind(TF$TF,TF$gene)),directed = T)
mycolor <- as.data.frame(V(gg)$name)
colnames(mycolor) <- "gene"
mycolor$color <- "honeydew"
TFlist <- c("Myc", "Klf2", "Tfdp1", "Sap30", "E2f4")
Heatlist <- subset(top20, cluster == 3)
Heatlist <- Heatlist$gene
mycolor$color <- ifelse(mycolor$gene %in% TFlist, "magenta", 
                        ifelse(mycolor$gene %in% Heatlist, "green", "honeydew"))
plot <- plot(gg,
             vertex.size=9, 
             vertex.shape="circle",
             vertex.label.color="black", 
             vertex.color = mycolor$color,
             vertex.label.font=4,
             vertex.frame.color="grey30", 
             vertex.label.cex=0.6,
             edge.color="grey50", 
             edge.arrow.size = 0.05,
             layout=layout.fruchterman.reingold, 
             vertex.label.family = "Arial"
)

# Lgals3
VlnPlot(all, features = "Lgals3", group.by = "condition", 
        cols = c("#F88284", "#93458A", "#22AC7C", "#A3A500", "#4FACEF")) 

# hepatocytes from the control liver vs hepatocytes from the transplatend liver
cntl <- subset(hepa, mouse == "control")
tran <- subset(hepa, mouse == "transplanted")

Idents(cntl) <- "control"
Idents(tran) <- "transplanted"
ct <- merge(cntl, tran)

de1 <- FindMarkers(ct, ident.1 = "transplanted", ident.2 = "control", min.pct = 0) # testはwilcox-test
de1$gene <- rownames(de1)
de1$test <- "FALSE"
de1[abs(de1$avg_log2FC) > 0.27 & de1$p_val_adj<0.1, ]$test <- "TRUE" 
de1_cntl <- de1[de1$avg_log2FC < 0, ]
de1_cntl$mouse <- "control"
de1_trans <- de1[de1$avg_log2FC > 0, ]
de1_trans$mouse <- "transplanted"
de1_cntl_vs_trans <- rbind(de1_cntl, de1_trans)

install.packages("pacman")
pacman::p_load(here,  
               tidyverse, 
               janitor, # Cleaning column names  
               scales, # Transform axis scales   
               ggrepel) # Optimise plot label separation

de1_cntl_vs_trans <- de1_cntl_vs_trans %>% 
  mutate(gene_type = case_when(avg_log2FC >= 0.27 & p_val_adj <= 0.05 ~ "up",
                               avg_log2FC <= -0.27 & p_val_adj <= 0.05 ~ "down",
                               TRUE ~ "ns"))
de1_cntl_vs_trans %>% 
  distinct(gene_type) %>% 
  pull()

certein_genes <- subset(de1_cntl_vs_trans2, gene == "Lcn2" | gene == "Saa1")

ggplot(data = de1_cntl_vs_trans, 
       aes(x = avg_log2FC, y = -log10(p_val_adj))) +
  geom_point(colour = "grey", alpha = 0.5) +
  geom_point(data = certein_genes,
             size = 2,
             shape = 21,
             fill = "firebrick",
             colour = "black") + 
  geom_hline(yintercept = -log10(0.05),
             linetype = "dashed") + 
  geom_vline(xintercept = c(0.27, -0.27),
             linetype = "dashed") +
  labs(x = "log2(fold change)",
       y = "-log10(adjusted P-value)",
       colour = "Expression \nchange") +
  theme_bw() +
  theme(panel.border = element_rect(colour = "black", fill = NA, size= 0.5),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_blank())
  # geom_label_repel(data = certein_genes,
  #                  aes(label = gene),
  #                  force = 2,
  #                  nudge_y = 1) #FigS13

##### E0771 ####
# E0771 from the metastasized liver vs E0771 in vitro
E0771 <- subset(E0771, nCount_RNA > 3000)
E0771 <- subset(E0771, percent.mt < 7)
vivo <- subset(E0771, condition == "E0771vivo")
vitro <- subset(E0771, condition == "E0771vitro")

Idents(vivo) <- "vivo"
Idents(vitro) <- "vitro"

vv <- merge(vivo, vitro)

de3 <- FindMarkers(vv, ident.1 = "vivo", ident.2 = "vitro", min.pct = 0)
de3$gene <- rownames(de3)
de3$test <- "FALSE"
de3[abs(de3$avg_log2FC) > 0.27 & de3$p_val_adj<0.1, ]$test <- "TRUE"

de3_vivo <- de3[de3$avg_log2FC > 0, ]
de3_vivo$condition <- "vivo"
de3_vitro <- de3[de3$avg_log2FC < 0, ]
de3_vitro$condition <- "vitro"
de3_vivo_vs_vitro <- rbind(de3_vivo, de3_vitro)
de3_vivo_vs_vitro <- subset(de3_vivo_vs_vitro, test == "TRUE")

twogroup_entrez <- function(twogroup.deg, ms_ref, condition, p.thres, log2FC.thres){
  twogroup.marker.n <- twogroup.deg[twogroup.deg$condition == condition &
                                      twogroup.deg$p_val<p.thres &
                                      abs(twogroup.deg$avg_log2FC)>log2FC.thres,]
  perturbed_gene.n <- ms_ref[ms_ref$gene_short_name %in% twogroup.marker.n$gene,]
  perturbed_gene.n <- perturbed_gene.n[!is.na(perturbed_gene.n$entrez_annotation),]
  return(perturbed_gene.n)
}

de3_vivo.marker <- twogroup_entrez(de3_vivo_vs_vitro, ms_ref, "vivo", 0.01, 0.3)
ego_vivo <- enrichGO(gene = de3_vivo.marker$entrez_annotation,
                     OrgDb = org.Mm.eg.db,
                     ont = "ALL",
                     pAdjustMethod = "BH",
                     pvalueCutoff = 0.05,
                     qvalueCutoff = 0.05,
                     readable = T)
barplot(ego_vivo, drop = T, showCategory = 30, font.size = 8) #FigS14
write.xlsx(ego_vivo, "ego_vivo.xlsx", sheetName = "Sheet1")

######allcell#######
VlnPlot(all, features = c("Il2", "Itgb1"), group.by = "condition", 
        cols = c("#F88284", "#93458A", "#22AC7C", "#A3A500", "#4FACEF"))


